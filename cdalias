#!/usr/bin/env bash
## WARNING: This script is meant to be sourced, it might get weird otherwise.
##
we="${0##*/}"
function doexit() {
	if (( $# -gt 0 )) ; then
		declare -i rc=$1
	else
		declare -i rc=$?
	fi
	return $rc
}
function cleanup() {
	set +x
}
declare -i _vlvl=${BASH_VERSINFO[0]}
if [ $_vlvl -lt 4 ] ; then
	builtin `echo ${0##*/} | tr \[:upper:] \[:lower:]` ${1+"$@"}
	doexit
fi
read -r -d '' HELP << EndOfHelp
------------------------------------------------------
cdalias is a script which creates directory aliases 
for the  bash cd builtin.Aliases are stored in the 
file pointed to by CDDICTFILE or \$HOME/.cdaliases if not
 set. The format of this file is simple:

	 alias definition # Comment
 
 Comments may also be placed at the beginning of the 
 line and those lines, as well as blank lines, are 
 ignored entirely.

 Additional options have been added to the cd command:
		-a alias definition or -a alias:definition
			   store new alias definition 
		                      and exit  
		-list  list the directory aliases and exit
		-o     cd will act like popd, although directory 
		       aliases are then irrelevant
		-p     cd will act like pushd
		-r alias removes the alias.
		-h 	   Will display the internal help for cd, 
		       then help on these options and exit

 To use, declare and export a bash function as below:
 function cd() { eval \$(~/bin/cdalias \$@); } ; export -f cd

 Once this is put in place, you may use cd as you always do 
 with the additional benefit of being able to type cd <alias> 
 and get to the place pointed by <alias>

 The built-in aliases, when there is no dictionary file, are:
 	...	gets to the parent of the parent, or ../..
 	.... gets to the parent of the parent of the parent, or ../../..

.
EndOfHelp
dictfile=${CDDICTFILE:="$HOME/.cdaliases"}
declare -A cdict=(["____foo"]="bar")

function writealiases() {
	fdata="## Aliases generated by cdaliases\n"
	for key in "${!cdict[@]}" ; do
		fdata="${fdata}${key}:${cdict[$key]}\n"
	done
	echo -e "${fdata}">$dictfile
}

if [ ! -f "$dictfile" ] ; then
	cdict['...']='../..'
	cdict['....']='../../..'
else
	sdata=""
	XFS=IFS
	IFS=':'
	while read -r key val ; do
		key="${key%%\#*}"
		val="${val%%\#*}"
		if [ -n "$key" ] ; then
			if [ -n "$val" ] ; then
				cdict["$key"]="$val"
			fi
		fi
	done < $dictfile ## No sub-shell, so variables remain set. 
fi
unset cdict["____foo"]
cdargs=""
cmd="cd"
case "$1" in
	"-a" )
		shift
		method=0
		for v in "$@" ; do
			echo "$v" | grep -q ':' && method=1
		done
		if ((method==1)); then
			t="$@"
			lh="$(echo "$t" | cut -f1 -d:)"
			rh="$(echo "$t" | cut -f2 -d:)"
		elif [ -n "$1" ] && [ -n "$2" ] ; then
			lh="$1"
			shift
			rh="$@"			
		else
			echo "Usage: -a key value\nor\n-a \"key:value\"" >&2
			doexit 1
		fi
		set +x
		echo "Created alias for \"$lh\" => \"$rh\"">&2
		cdict["$lh"]="$rh"
		#for x in "${!cdict[@]}"; do 
		#	printf "[%s]=%s\n" "$x" "${cdict[$x]}" >&2
		#done
		writealiases
		doexit 0
		;;
	"-r" | "--remove")
		[ -z "$2" ] && { echo "Usage: cd -r <alias>" >&2; doexit 1;}
		if [ -n "${cdict["$2"]}" ] ; then
			unset cdict["$2"] && { echo "Alias for $2 removed." >&2; writealiases; doexit 0;}
		else
			echo "$2: not found" >&2;
			doexit 1;
		fi
		doexit;;
	"-p" )
		cmd="pushd"
		shift
		;;
	"-o")
		cmd="popd"
		shift
		;;
	"--list")
		(echo "Alias list:";
		for a in ${!cdict[@]}; do
			echo "    \"$a\" is an alias for \"${cdict[$a]}\""
		done) >&2
		doexit
		;;
	"-h" | "--help")
		echo -e "This is help for cdalias. For help with the regular cd options use 'help cd'\n$HELP" >&2 
		doexit
		;;
esac
#
# At this point there should be 0 or 1 argument.
#
if [ $# -eq 0 ] ; then
	arg=~
else
	if [ -z "${cdict["$1"]}" ] ; then
		arg="$1"
	else
		arg="${cdict["$1"]}"
	fi
fi
if ((sourced)) ; then
	builtin $cmd "$arg" 
else
	echo "builtin $cmd \"$arg\""
fi
cleanup