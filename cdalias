#!/usr/bin/env bash
## WARNING: This script is meant to be sourced, it might get weird otherwise.
##
read -r -d '' _CDALIAS_HELP << EndOfHelp
------------------------------------------------------
cdalias is a script which creates directory aliases 
for the  bash cd builtin.Aliases are stored in the 
file pointed to by CD_cdalias_dictfile or \$HOME/.cdaliases if not
 set. The format of this file is simple:

	 alias definition # Comment
 
 Comments may also be placed at the beginning of the 
 line and those lines, as well as blank lines, are 
 ignored entirely.

 Additional options have been added to the cd command:
		-a alias definition or -a alias:definition
			   store new alias definition 
		                      and exit  
		-o     cd will act like popd, although directory 
		       aliases are then irrelevant
		-p     cd will act like pushd
		-r alias removes the alias.
		-h 	   Will display the internal help for cd, 
		       then help on these options and exit
		-list  list the directory aliases and exit
		-reload Reload aliases from dictionary file

 To use, declare and export a bash function as below:
 function cd() { eval \$(~/bin/cdalias \$@); } ; export -f cd

 Once this is put in place, you may use cd as you always do 
 with the additional benefit of being able to type cd <alias> 
 and get to the place pointed by <alias>

 The built-in aliases, when there is no dictionary file, are:
 	...	gets to the parent of the parent, or ../..
 	.... gets to the parent of the parent of the parent, or ../../..

  Alias names must not contain leading dashes or any slashes or, 
  generally special characters. For aliase names with spaces use
  the second syntax of 
  	alias name:/some/long/path
  Other restrictions such as slashes, dashes and special characters
  apply. 
.
EndOfHelp
we="${0##*/}"
declare -i _vlvl=${BASH_VERSINFO[0]}
if [ $_vlvl -lt 4 ] ; then
	echo "${we}: cdalias requires BASH version 4+ this is bash version ${_vlvl}" >&2
	return 1
fi
_cdalias_dictfile=${CDALIASDICTFILE:="$HOME/.cdaliases"}
declare -A _cdalias_dictionary
_cdalias_dictionary['...']='../..' # Default aliases
_cdalias_dictionary['....']='../../..'
#export _cdalias_dictfile
#export _cdalias_dictionary

function _cdalias_writealiases() {
	fdata="## Aliases generated by cdaliases\n"
	for key in "${!_cdalias_dictionary[@]}" ; do
		fdata="${fdata}${key}:${_cdalias_dictionary[$key]}\n"
	done
	echo -e "${fdata}">$_cdalias_dictfile
}

function _cdalias_readaliases() {
	if [  -f "$_cdalias_dictfile" ] ; then
		#echo "reading aliases from $_cdalias_dictfile";
		sdata=""
		XFS=$IFS
		IFS=':'
		declare -i line=1
		while read -r key val ; do
			key="${key%%\#*}"
			val="${val%%\#*}"
			if [[ $key =~ ^[0-9] && ! $key =~ [A-Z,a-z,0-9,\ \-_\.] ]] ; then
				echo "${_cdalias_dictfile}(${line}): Error in key \"$key\" - Invalid token." >&2
				return 1
			fi
			if [[ -n $key ]] ; then
				if [[ -n $val ]] ; then
					_cdalias_dictionary["$key"]="$val"
					#echo "Setting [$key:$val], ${_cdalias_dictionary["$key"]}"
				fi
			fi
			line=$((line+1))
		done < $_cdalias_dictfile ## No sub-shell, so variables remain set. 
	fi
	IFS=$XFS
}
_cdalias_readaliases

function cdalias() {
	cdargs=""
	cmd="cd"
	case "$1" in
		"-reload")
			_cdalias_readaliases
			return;;

		"-a" )
			shift
			method=0
			for v in "$@" ; do
				echo "$v" | grep -q ':' && method=1
			done
			if ((method==1)); then
				t="$@"
				lh="$(echo "$t" | cut -f1 -d:)"
				rh="$(echo "$t" | cut -f2 -d:)"
			elif [ -n "$1" ] && [ -n "$2" ] ; then
				lh="$1"
				shift
				rh="$@"			
			else
				echo "Usage: -a key value\nor\n-a \"key:value\""
				return 1
			fi
			set +x
			echo "Created alias for \"$lh\" => \"$rh\""
			_cdalias_dictionary["$lh"]="$rh"
			_cdalias_writealiases
			return 0
			;;
		"-r" | "--remove")
			[ -z "$2" ] && { echo "Usage: cd -r <alias>" >&2; return 1;}
			if [ -n "${_cdalias_dictionary["$2"]}" ] ; then
				unset _cdalias_dictionary["$2"] && { echo "Alias for $2 removed." >&2; _cdalias_writealiases; return 0;}
			else
				echo "$2: not found" >&2;
				return 1;
			fi
			return;;
		"-p" )
			cmd="pushd"
			shift
			;;
		"-o")
			builtin popd
			return;;
		"-list"|"--list")
			echo "Alias list:"
			for a in ${!_cdalias_dictionary[@]}; do
				echo "    \"$a\" is an alias for \"${_cdalias_dictionary[$a]}\""
			done
			return
			;;
		"-h" | "--help")
			echo -e "This is help for cdalias. For help with the regular cd options use 'help cd'\n$_CDALIAS_HELP"
			return
			;;
	esac
	#
	# At this point there should be 0 or 1 argument, if more than 1 argument, only 1 is used. 
	#
	arg="$1"
	if [[ -z "${1+x}" ]] ; then
		arg="$HOME"
	elif [[  $arg =~ ^[0-9] ]] ; then
		true
	elif [[ -d $arg ]] ; then
		true
	elif [[ ! $arg =~ ^[0-9] && $arg =~ [A-Z,a-z,0-9,\ \-_\.] ]] ; then
		if [ -n "${_cdalias_dictionary["$arg"]}" ] ; then
			arg="${_cdalias_dictionary["$arg"]}"
		fi
	fi
	builtin $cmd "$arg" 
}
export -f cdalias
alias cd=cdalias
